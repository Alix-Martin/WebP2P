#pragma once
#pragma warning (disable: 4290)

#include "AudioSource.hpp"

class AudioSourceException : public std::exception {
	const char* str;
public:
	AudioSourceException(const char* what) : str(what){};
	
	const char* what() { return str; }
};

class AudioInputDevice : public AudioSource {
	AudioSink* audioSink;

	static const int AUDIO_INPUT_BUFFER_COUNT = 3;
	static const int AUDIO_INPUT_BUFFER_SIZE = 512;

	bool keepRecording;

	HWAVEIN audioSource;
	WAVEHDR audioBuffers[AUDIO_INPUT_BUFFER_COUNT];
public:
	/**
	 * Creates a new audio input device. The default audio input hardware will
	 * be used.
	 */
	AudioInputDevice();
	/**
	 * Creates a new audio input device. The parameter determines the used
	 * hardware.
	 * Use listAvailableSources() to get a list of valid values for the
	 * parameter.
	 */
	AudioInputDevice(std::wstring inputSource) throw(AudioSourceException);

	/**
	 * Destructor
	 */
	~AudioInputDevice();

	/**
	 * Lists all valid audio input hardware.
	 */
	static std::vector<std::wstring> listAvailableSources() throw(AudioSourceException);

	/**
	 * Sets the object that will receive the audio generated by this object.
	 */
	void setAudioSink(AudioSink* audioSink);

	void onAudioData(void* data);
private:
	unsigned int deviceIdFromString(std::wstring inputSource);

	void openAudioInputSource(unsigned int deviceId);
	void closeAudioInputSource();

	void initializeBuffers();
	void destroyBuffers();

	void startRecording();
	void stopRecording();
};